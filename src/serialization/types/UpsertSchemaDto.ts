/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Squidex from "../../api";
import * as core from "../../core";

export const UpsertSchemaDto: core.serialization.ObjectSchema<
    serializers.UpsertSchemaDto.Raw,
    Squidex.UpsertSchemaDto
> = core.serialization.object({
    properties: core.serialization.lazyObject(async () => (await import("..")).SchemaPropertiesDto).optional(),
    scripts: core.serialization.lazyObject(async () => (await import("..")).SchemaScriptsDto).optional(),
    fieldsInReferences: core.serialization.list(core.serialization.string()).optional(),
    fieldsInLists: core.serialization.list(core.serialization.string()).optional(),
    fields: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("..")).UpsertSchemaFieldDto))
        .optional(),
    previewUrls: core.serialization
        .record(core.serialization.string(), core.serialization.string().optional())
        .optional(),
    fieldRules: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("..")).FieldRuleDto))
        .optional(),
    category: core.serialization.string().optional(),
    isPublished: core.serialization.boolean(),
});

export declare namespace UpsertSchemaDto {
    interface Raw {
        properties?: serializers.SchemaPropertiesDto.Raw | null;
        scripts?: serializers.SchemaScriptsDto.Raw | null;
        fieldsInReferences?: string[] | null;
        fieldsInLists?: string[] | null;
        fields?: serializers.UpsertSchemaFieldDto.Raw[] | null;
        previewUrls?: Record<string, string | null | undefined> | null;
        fieldRules?: serializers.FieldRuleDto.Raw[] | null;
        category?: string | null;
        isPublished: boolean;
    }
}
