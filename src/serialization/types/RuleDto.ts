/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Squidex from "../../api";
import * as core from "../../core";

export const RuleDto: core.serialization.ObjectSchema<serializers.RuleDto.Raw, Squidex.RuleDto> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        createdBy: core.serialization.string().optional(),
        lastModifiedBy: core.serialization.string().optional(),
        created: core.serialization.string().optional(),
        lastModified: core.serialization.string().optional(),
        version: core.serialization.number().optional(),
        isEnabled: core.serialization.boolean().optional(),
        name: core.serialization.string().optional(),
        trigger: core.serialization.lazy(async () => (await import("..")).RuleTriggerDto).optional(),
        action: core.serialization.lazy(async () => (await import("..")).RuleActionDto).optional(),
        numSucceeded: core.serialization.number().optional(),
        numFailed: core.serialization.number().optional(),
        lastExecuted: core.serialization.string().optional(),
    });

export declare namespace RuleDto {
    interface Raw {
        id?: string | null;
        createdBy?: string | null;
        lastModifiedBy?: string | null;
        created?: string | null;
        lastModified?: string | null;
        version?: number | null;
        isEnabled?: boolean | null;
        name?: string | null;
        trigger?: serializers.RuleTriggerDto.Raw | null;
        action?: serializers.RuleActionDto.Raw | null;
        numSucceeded?: number | null;
        numFailed?: number | null;
        lastExecuted?: string | null;
    }
}
