/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Squidex from "../../api";
import * as core from "../../core";

export const RuleDto: core.serialization.ObjectSchema<serializers.RuleDto.Raw, Squidex.RuleDto> =
    core.serialization.object({
        id: core.serialization.string(),
        createdBy: core.serialization.string(),
        lastModifiedBy: core.serialization.string(),
        created: core.serialization.string(),
        lastModified: core.serialization.string(),
        version: core.serialization.number(),
        isEnabled: core.serialization.boolean(),
        name: core.serialization.string().optional(),
        trigger: core.serialization.lazy(async () => (await import("..")).RuleTriggerDto),
        action: core.serialization.lazy(async () => (await import("..")).RuleActionDto),
        numSucceeded: core.serialization.number(),
        numFailed: core.serialization.number(),
        lastExecuted: core.serialization.string().optional(),
    });

export declare namespace RuleDto {
    interface Raw {
        id: string;
        createdBy: string;
        lastModifiedBy: string;
        created: string;
        lastModified: string;
        version: number;
        isEnabled: boolean;
        name?: string | null;
        trigger: serializers.RuleTriggerDto.Raw;
        action: serializers.RuleActionDto.Raw;
        numSucceeded: number;
        numFailed: number;
        lastExecuted?: string | null;
    }
}
