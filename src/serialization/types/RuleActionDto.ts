/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../core";
import * as serializers from "..";
import * as Squidex from "../../api";

const _Base = core.serialization.object({
    actionType: core.serialization.string(),
});
export const RuleActionDto: core.serialization.Schema<serializers.RuleActionDto.Raw, Squidex.RuleActionDto> =
    core.serialization
        .union("type", {
            Algolia: core.serialization.lazyObject(async () => (await import("..")).AlgoliaRuleActionDto).extend(_Base),
            AzureQueue: core.serialization
                .lazyObject(async () => (await import("..")).AzureQueueRuleActionDto)
                .extend(_Base),
            Comment: core.serialization.lazyObject(async () => (await import("..")).CommentRuleActionDto).extend(_Base),
            CreateContent: core.serialization
                .lazyObject(async () => (await import("..")).CreateContentRuleActionDto)
                .extend(_Base),
            Discourse: core.serialization
                .lazyObject(async () => (await import("..")).DiscourseRuleActionDto)
                .extend(_Base),
            ElasticSearch: core.serialization
                .lazyObject(async () => (await import("..")).ElasticSearchRuleActionDto)
                .extend(_Base),
            Email: core.serialization.lazyObject(async () => (await import("..")).EmailRuleActionDto).extend(_Base),
            Fastly: core.serialization.lazyObject(async () => (await import("..")).FastlyRuleActionDto).extend(_Base),
            Medium: core.serialization.lazyObject(async () => (await import("..")).MediumRuleActionDto).extend(_Base),
            Notification: core.serialization
                .lazyObject(async () => (await import("..")).NotificationRuleActionDto)
                .extend(_Base),
            OpenSearch: core.serialization
                .lazyObject(async () => (await import("..")).OpenSearchRuleActionDto)
                .extend(_Base),
            Prerender: core.serialization
                .lazyObject(async () => (await import("..")).PrerenderRuleActionDto)
                .extend(_Base),
            Script: core.serialization.lazyObject(async () => (await import("..")).ScriptRuleActionDto).extend(_Base),
            SignalR: core.serialization.lazyObject(async () => (await import("..")).SignalRRuleActionDto).extend(_Base),
            Slack: core.serialization.lazyObject(async () => (await import("..")).SlackRuleActionDto).extend(_Base),
            Tweet: core.serialization.lazyObject(async () => (await import("..")).TweetRuleActionDto).extend(_Base),
            Typesense: core.serialization
                .lazyObject(async () => (await import("..")).TypesenseRuleActionDto)
                .extend(_Base),
            Webhook: core.serialization.lazyObject(async () => (await import("..")).WebhookRuleActionDto).extend(_Base),
        })
        .transform<Squidex.RuleActionDto>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace RuleActionDto {
    type Raw =
        | RuleActionDto.Algolia
        | RuleActionDto.AzureQueue
        | RuleActionDto.Comment
        | RuleActionDto.CreateContent
        | RuleActionDto.Discourse
        | RuleActionDto.ElasticSearch
        | RuleActionDto.Email
        | RuleActionDto.Fastly
        | RuleActionDto.Medium
        | RuleActionDto.Notification
        | RuleActionDto.OpenSearch
        | RuleActionDto.Prerender
        | RuleActionDto.Script
        | RuleActionDto.SignalR
        | RuleActionDto.Slack
        | RuleActionDto.Tweet
        | RuleActionDto.Typesense
        | RuleActionDto.Webhook;

    interface Algolia extends _Base, serializers.AlgoliaRuleActionDto.Raw {
        type: "Algolia";
    }

    interface AzureQueue extends _Base, serializers.AzureQueueRuleActionDto.Raw {
        type: "AzureQueue";
    }

    interface Comment extends _Base, serializers.CommentRuleActionDto.Raw {
        type: "Comment";
    }

    interface CreateContent extends _Base, serializers.CreateContentRuleActionDto.Raw {
        type: "CreateContent";
    }

    interface Discourse extends _Base, serializers.DiscourseRuleActionDto.Raw {
        type: "Discourse";
    }

    interface ElasticSearch extends _Base, serializers.ElasticSearchRuleActionDto.Raw {
        type: "ElasticSearch";
    }

    interface Email extends _Base, serializers.EmailRuleActionDto.Raw {
        type: "Email";
    }

    interface Fastly extends _Base, serializers.FastlyRuleActionDto.Raw {
        type: "Fastly";
    }

    interface Medium extends _Base, serializers.MediumRuleActionDto.Raw {
        type: "Medium";
    }

    interface Notification extends _Base, serializers.NotificationRuleActionDto.Raw {
        type: "Notification";
    }

    interface OpenSearch extends _Base, serializers.OpenSearchRuleActionDto.Raw {
        type: "OpenSearch";
    }

    interface Prerender extends _Base, serializers.PrerenderRuleActionDto.Raw {
        type: "Prerender";
    }

    interface Script extends _Base, serializers.ScriptRuleActionDto.Raw {
        type: "Script";
    }

    interface SignalR extends _Base, serializers.SignalRRuleActionDto.Raw {
        type: "SignalR";
    }

    interface Slack extends _Base, serializers.SlackRuleActionDto.Raw {
        type: "Slack";
    }

    interface Tweet extends _Base, serializers.TweetRuleActionDto.Raw {
        type: "Tweet";
    }

    interface Typesense extends _Base, serializers.TypesenseRuleActionDto.Raw {
        type: "Typesense";
    }

    interface Webhook extends _Base, serializers.WebhookRuleActionDto.Raw {
        type: "Webhook";
    }

    interface _Base {
        actionType: string;
    }
}
