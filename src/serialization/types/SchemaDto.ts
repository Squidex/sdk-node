/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Squidex from "../../api";
import * as core from "../../core";

export const SchemaDto: core.serialization.ObjectSchema<serializers.SchemaDto.Raw, Squidex.SchemaDto> =
    core.serialization.object({
        id: core.serialization.string().optional(),
        createdBy: core.serialization.string().optional(),
        lastModifiedBy: core.serialization.string().optional(),
        name: core.serialization.string().optional(),
        type: core.serialization.lazy(async () => (await import("..")).SchemaType).optional(),
        category: core.serialization.string().optional(),
        properties: core.serialization.lazyObject(async () => (await import("..")).SchemaPropertiesDto).optional(),
        isSingleton: core.serialization.boolean().optional(),
        isPublished: core.serialization.boolean().optional(),
        created: core.serialization.string().optional(),
        lastModified: core.serialization.string().optional(),
        version: core.serialization.number().optional(),
        scripts: core.serialization.lazyObject(async () => (await import("..")).SchemaScriptsDto).optional(),
        previewUrls: core.serialization
            .record(core.serialization.string(), core.serialization.string().optional())
            .optional(),
        fieldsInLists: core.serialization.list(core.serialization.string()).optional(),
        fieldsInReferences: core.serialization.list(core.serialization.string()).optional(),
        fieldRules: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("..")).FieldRuleDto))
            .optional(),
        fields: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("..")).FieldDto))
            .optional(),
    });

export declare namespace SchemaDto {
    interface Raw {
        id?: string | null;
        createdBy?: string | null;
        lastModifiedBy?: string | null;
        name?: string | null;
        type?: serializers.SchemaType.Raw | null;
        category?: string | null;
        properties?: serializers.SchemaPropertiesDto.Raw | null;
        isSingleton?: boolean | null;
        isPublished?: boolean | null;
        created?: string | null;
        lastModified?: string | null;
        version?: number | null;
        scripts?: serializers.SchemaScriptsDto.Raw | null;
        previewUrls?: Record<string, string | null | undefined> | null;
        fieldsInLists?: string[] | null;
        fieldsInReferences?: string[] | null;
        fieldRules?: serializers.FieldRuleDto.Raw[] | null;
        fields?: serializers.FieldDto.Raw[] | null;
    }
}
