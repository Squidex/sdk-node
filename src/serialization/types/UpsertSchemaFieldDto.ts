/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Squidex from "../../api";
import * as core from "../../core";

export const UpsertSchemaFieldDto: core.serialization.ObjectSchema<
    serializers.UpsertSchemaFieldDto.Raw,
    Squidex.UpsertSchemaFieldDto
> = core.serialization.object({
    name: core.serialization.string(),
    isHidden: core.serialization.boolean(),
    isLocked: core.serialization.boolean(),
    isDisabled: core.serialization.boolean(),
    partitioning: core.serialization.string().optional(),
    properties: core.serialization.lazy(async () => (await import("..")).FieldPropertiesDto),
    nested: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("..")).UpsertSchemaNestedFieldDto))
        .optional(),
});

export declare namespace UpsertSchemaFieldDto {
    interface Raw {
        name: string;
        isHidden: boolean;
        isLocked: boolean;
        isDisabled: boolean;
        partitioning?: string | null;
        properties: serializers.FieldPropertiesDto.Raw;
        nested?: serializers.UpsertSchemaNestedFieldDto.Raw[] | null;
    }
}
