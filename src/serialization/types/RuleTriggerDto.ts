/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../core";
import * as serializers from "..";
import * as Squidex from "../../api";

const _Base = core.serialization.object({
    triggerType: core.serialization.string(),
});
export const RuleTriggerDto: core.serialization.Schema<serializers.RuleTriggerDto.Raw, Squidex.RuleTriggerDto> =
    core.serialization
        .union("type", {
            AssetChanged: core.serialization
                .lazyObject(async () => (await import("..")).AssetChangedRuleTriggerDto)
                .extend(_Base),
            Comment: core.serialization
                .lazyObject(async () => (await import("..")).CommentRuleTriggerDto)
                .extend(_Base),
            ContentChanged: core.serialization
                .lazyObject(async () => (await import("..")).ContentChangedRuleTriggerDto)
                .extend(_Base),
            Manual: core.serialization.lazyObject(async () => (await import("..")).ManualRuleTriggerDto).extend(_Base),
            SchemaChanged: core.serialization
                .lazyObject(async () => (await import("..")).SchemaChangedRuleTriggerDto)
                .extend(_Base),
            Usage: core.serialization.lazyObject(async () => (await import("..")).UsageRuleTriggerDto).extend(_Base),
        })
        .transform<Squidex.RuleTriggerDto>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace RuleTriggerDto {
    type Raw =
        | RuleTriggerDto.AssetChanged
        | RuleTriggerDto.Comment
        | RuleTriggerDto.ContentChanged
        | RuleTriggerDto.Manual
        | RuleTriggerDto.SchemaChanged
        | RuleTriggerDto.Usage;

    interface AssetChanged extends _Base, serializers.AssetChangedRuleTriggerDto.Raw {
        type: "AssetChanged";
    }

    interface Comment extends _Base, serializers.CommentRuleTriggerDto.Raw {
        type: "Comment";
    }

    interface ContentChanged extends _Base, serializers.ContentChangedRuleTriggerDto.Raw {
        type: "ContentChanged";
    }

    interface Manual extends _Base, serializers.ManualRuleTriggerDto.Raw {
        type: "Manual";
    }

    interface SchemaChanged extends _Base, serializers.SchemaChangedRuleTriggerDto.Raw {
        type: "SchemaChanged";
    }

    interface Usage extends _Base, serializers.UsageRuleTriggerDto.Raw {
        type: "Usage";
    }

    interface _Base {
        triggerType: string;
    }
}
