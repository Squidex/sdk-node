/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../..";
import * as Squidex from "../../../../../api";
import * as core from "../../../../../core";

export const UpdateWorkflowDto: core.serialization.Schema<
    serializers.UpdateWorkflowDto.Raw,
    Squidex.UpdateWorkflowDto
> = core.serialization.object({
    name: core.serialization.string().optional(),
    steps: core.serialization.record(
        core.serialization.string(),
        core.serialization.lazyObject(async () => (await import("../../../..")).WorkflowStepDto)
    ),
    schemaIds: core.serialization.list(core.serialization.string()).optional(),
    initial: core.serialization.string(),
});

export declare namespace UpdateWorkflowDto {
    interface Raw {
        name?: string | null;
        steps: Record<string, serializers.WorkflowStepDto.Raw>;
        schemaIds?: string[] | null;
        initial: string;
    }
}
